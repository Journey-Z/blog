<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Journey&#39;s Blog</title>
    <link>https://journey-z.github.io/posts/</link>
    <description>Recent content in Posts on Journey&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 05 Feb 2021 16:22:25 +0800</lastBuildDate>
    
	<atom:link href="https://journey-z.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>微服务架构</title>
      <link>https://journey-z.github.io/posts/micro-frame/</link>
      <pubDate>Fri, 05 Feb 2021 16:22:25 +0800</pubDate>
      
      <guid>https://journey-z.github.io/posts/micro-frame/</guid>
      <description>服务化项目讨论 上次会议回顾 上次会议纪要： 服务注册与发现管理的服务实例元数据和字段分析
 name：服务名称 tags：服务的 tag，自定义，可以根据这个tag来区分同一个服务名的服务。 address：服务注册到 consul 的 IP，服务发现，发现的就是这个 IP。 port：服务注册consul的PORT，发现的就是这个 port。 meta: 其他一些自定义的数据。  基础支撑服务结合 aws 服务调研
目前在 aws 上有 cloud map 提供服务注册和发现的服务托管和 Api Gateway 网关的服务托管，X-ray 服务追踪和监控托管，暂时还没花时间去研究
服务化架构图调整
服务化核心支撑服务  api 服务网关 服务注册与发现 服务容错 服务链路追踪  API 服务网关 服务网关的作用：网关就是一个处于应用程序或服务之前的系统，用来管理授权、访问控制和流量限制等。
API 网关的职能主要有：  请求接入：作为所有 API 接口服务请求的接入点，管理所有的接入请求。 业务聚合：作为所有后端业务服务的聚合点，所有的业务服务都可以在这里被调用。 拦截插件：实现安全、验证、路由、过滤、流控、缓存等策略，进行一些必要的插件去处理。 统一管理：提供配置管理工具，对所有 API 服务的调用生命周期和相应的中介策略进行统一管理。  API 网关设计和选型的关注点： 1. 开发维护简单，节约人力成本和维护成本。应选择成熟的简单可维护的技术体系。 2. 高性能，节约设备成本，提高系统吞吐能力。要求我们需要针对 API 网关的特点进行一些特定的设计和权衡。
鉴于目前我们网关相关技术栈主要是基于 Nginx，选择了网上开源热度较高的 Kong 和 Nginx 进行比较:</description>
    </item>
    
  </channel>
</rss>